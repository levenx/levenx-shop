type BaseOption = {
  /** 接口调用结束的回调函数（调用成功、失败都会执行） */
  complete?: (param: any) => void
}

type SystemInfo = {
  /** 设备品牌 (最低版本: 1.5.0)*/
  brand: string,
  /** 设备型号 */
  model: string,
  /** 设备像素比 */
  pixelRatio: number,
  /** 屏幕宽度，单位px (最低版本: 1.1.0)*/
  screenWidth: number,
  /** 屏幕高度，单位px (最低版本: 1.1.0)*/
  screenHeight: number,
  /** 可使用窗口宽度，单位px */
  windowWidth: number,
  /** 可使用窗口高度，单位px */
  windowHeight: number,
  /** 状态栏的高度，单位px (最低版本: 1.9.0)*/
  statusBarHeight: number,
  /** 微信设置的语言 */
  language: string,
  /** 微信版本号 */
  version: string,
  /** 操作系统及版本 */
  system: string,
  /** 客户端平台 */
  platform: string,
  /** 用户字体大小（单位px）。以微信客户端「我-设置-通用-字体大小」中的设置为准 (最低版本: 1.5.0)*/
  fontSizeSetting: number,
  /** 客户端基础库版本 (最低版本: 1.1.0)*/
  SDKVersion: string,
  /** 设备性能等级（仅Android小游戏）。取值为：-2 或 0（该设备无法运行小游戏），-1（性能未知），>=1（设备性能值，该值越高，设备性能越好，目前最高不到50） (最低版本: 1.8.0)*/
  benchmarkLevel: number,
  /** 允许微信使用相册的开关（仅 iOS 有效） (最低版本: 2.6.0)*/
  albumAuthorized: boolean,
  /** 允许微信使用摄像头的开关 (最低版本: 2.6.0)*/
  cameraAuthorized: boolean,
  /** 允许微信使用定位的开关 (最低版本: 2.6.0)*/
  locationAuthorized: boolean,
  /** 允许微信使用麦克风的开关 (最低版本: 2.6.0)*/
  microphoneAuthorized: boolean,
  /** 允许微信通知的开关（仅 iOS 有效） (最低版本: 2.6.0)*/
  notificationAuthorized: boolean,
  /** 允许微信通知带有提醒的开关（仅 iOS 有效） (最低版本: 2.6.0)*/
  notificationAlertAuthorized: boolean,
  /** 允许微信通知带有标记的开关（仅 iOS 有效） (最低版本: 2.6.0)*/
  notificationBadgeAuthorized: boolean,
  /** 允许微信通知带有声音的开关（仅 iOS 有效） (最低版本: 2.6.0)*/
  notificationSoundAuthorized: boolean,
  /** 蓝牙的系统开关 (最低版本: 2.6.0)*/
  bluetoothEnabled: boolean,
  /** 地理位置的系统开关 (最低版本: 2.6.0)*/
  locationEnabled: boolean,
  /** Wi-Fi 的系统开关 (最低版本: 2.6.0)*/
  wifiEnabled: boolean,
}

type DebugOption = BaseOption & {
  /** 是否打开调试 (基础库 1.4.0 开始支持，低版本需做兼容处理。) */
  enableDebug: boolean,
}

type TabBarOption = BaseOption & {
  /** 需要跳转的 tabBar 页面的路径（需在 app.json 的 tabBar 字段定义的页面），路径后不能带参数。 */
  url: string,
}

type UrlOption = BaseOption & {
  /** 需要跳转的应用内页面路径，路径后可以带参数。参数与路径之间使用?分隔，参数键与参数值用=相连，不同参数用&分隔；如 'path?key=value&key2=value2' */
  url: string,
}

type NavigateBackOption = BaseOption & {
  /** 返回的页面数，如果 delta 大于现有页面数，则返回到首页。 */
  delta: number
}

type LoadingOption = BaseOption & {
  /** 提示的内容 */
  title: string,
  /** 是否显示透明蒙层，防止触摸穿透 */
  mask: boolean,
}

type ToastOption = LoadingOption & {
  /** 图标 */
  icon: 'success' | 'loading' | 'none',
  /** 自定义图标的本地路径，image 的优先级高于 icon (最低版本: 1.1.0) */
  image: string,
  /** 提示的延迟时间 */
  duration: number,
}

type ModalOption = BaseOption & {
  /** 提示的标题 */
  title: string,
  /** 提示的内容 */
  content: string,
  /** 是否显示取消按钮 */
  showCancel: boolean,
  /** 取消按钮的文字，最多 4 个字符 */
  cancelText: string,
  /** 取消按钮的文字颜色，必须是 16 进制格式的颜色字符串 */
  cancelColor: string,
  /** 确认按钮的文字，最多 4 个字符 */
  confirmText: string,
  /** 确认按钮的文字颜色，必须是 16 进制格式的颜色字符串 */
  confirmColor: string,
}

type ActionSheetOption = BaseOption & {
  /** 按钮的文字数组，数组长度最大为 6 */
  itemList: string[],
  /** 按钮的文字颜色 */
  itemColor: string,
}

type BackgroundTextStyleOption = BaseOption & {
  /** 下拉背景字体、loading 图的样式。 */
  textStyle: 'dark' | 'light',
}

type TabBarRedDotOption = BaseOption & {
  /** tabBar 的哪一项，从左边算起 */
  index: number,
}

type ModalResp = {
  /** 为 true 时，表示用户点击了确定按钮 */
  confirm: boolean,
  /** 为 true 时，表示用户点击了取消（用于 Android 系统区分点击蒙层关闭还是点击取消按钮关闭）(最低版本 1.1.0) */
  cancel: boolean,
}

type ActionSheetResp = {
  /** 用户点击的按钮序号，从上到下的顺序，从0开始 */
  tapIndex: number
}

declare namespace mp {
  /**
   * 获取系统信息
   * @param option BaseOption
   */
  function getSystemInfo(option?: BaseOption): Promise<SystemInfo>

  /**
   * 设置是否打开调试开关。此开关对正式版也能生效。
   * @param option DebugOption
   */
  function setEnableDebug(option: DebugOption): Promise<void>

  /**
   * 跳转到 tabBar 页面，并关闭其他所有非 tabBar 页面
   * @param option TabBarOption
   */
  function switchTab(option: TabBarOption): Promise<void>

  /**
   * 关闭所有页面，打开到应用内的某个页面 (基础库 1.1.0 开始支持，低版本需做兼容处理)
   * @param option UrlOption
   */
  function reLaunch(option: UrlOption): Promise<void>

  /**
   * 关闭当前页面，跳转到应用内的某个页面。但是不允许跳转到 tabbar 页面。
   * @param option UrlOption
   */
  function redirectTo(option: UrlOption): Promise<void>

  /**
   * 保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面。使用 wx.navigateBack 可以返回到原页面。小程序中页面栈最多十层。
   * @param option UrlOption
   */
  function navigateTo(option: UrlOption): Promise<void>

  /**
   * 关闭当前页面，返回上一页面或多级页面。可通过 getCurrentPages() 获取当前的页面栈，决定需要返回几层。
   * @param option NavigateBackOption
   */
  function navigateBack(option?: NavigateBackOption): Promise<void>

  /**
   * 显示消息提示框
   * @param options ToastOption
   */
  function showToast(option: ToastOption): Promise<void>

  /**
   * 显示模态对话框
   * @param option ModalOption
   */
  function showModal(option: ModalOption): Promise<ModalResp>

  /**
   * 显示 loading 提示框。需主动调用 wx.hideLoading 才能关闭提示框
   * @param option LoadingOption
   */
  function showLoading(option: LoadingOption): Promise<void>

  /**
   * 显示操作菜单
   * @param option ActionSheetOption
   */
  function showActionSheet(option: ActionSheetOption): Promise<ActionSheetResp>

  /**
   * 隐藏消息提示框
   * @param option BaseOption
   */
  function hideToast(option?: BaseOption): Promise<void>

  /**
   * 隐藏 loading 提示框
   * @param option BaseOption
   */
  function hideLoading(option?: BaseOption): Promise<void>

  /**
   * 在当前页面显示导航条加载动画
   * @param option BaseOption
   */
  function showNavigationBarLoading(option?: BaseOption): Promise<void>

  /**
   * 动态设置下拉背景字体、loading 图的样式
   * 基础库 2.1.0 开始支持，低版本需做兼容处理。
   * @param option BackgroundTextStyleOption
   */
  function setBackgroundTextStyle(option: BackgroundTextStyleOption): Promise<void>

  /**
   * 显示 tabBar 某一项的右上角的红点
   * 基础库 1.9.0 开始支持，低版本需做兼容处理。
   * @param option 
   */
  function showTabBarRedDot(option: TabBarRedDotOption): Promise<void>
}

export default mp